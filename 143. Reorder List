You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000

APPROACH:
        1. find the mid of the list
        2. reverse the second half of the list after mid
        3. merge both the list using two extra pointers.
  
  
 CODE:
        """
Complete the rearrange() function below
For your reference 
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None                                                        #PREPBYTES

class LinkedList:
    def __init__(self):
        self.head=None
        self.tail = None


    def insertAtEnd(self,data): # returns head of the linked list
    def printSinglyLinkedList(self):

"""


# Function Arguments: head (refers to the head of the linked list)


def rearrange( head):
  fast = slow = head
  while fast and fast.next:
    slow = slow.next
    fast = fast.next.next
    
  prev , cur = None , slow.next
  while cur:
    temp = cur.next
    cur.next = prev
    prev = cur
    cur = temp
  slow.next = None
  
  head1 , head2 = head , prev
  while head2:
    temp = head1.next
    head1.next = head2
    head1 = head2
    head2 = temp
    
    
