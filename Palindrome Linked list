Palindrome List
You must have already solved a few problems on palindromes by now. You must have checked whether a number is a palindrome or not or a string is a palindrome or not. Now it's time to check whether the given linked list is a palindrome or not.

Input Format
The first line contains an integer 
T
, the number of test cases. Then follows 
T
 test cases. Each test case consists of two lines.
The first line contains 
N
, the size of the list.
The second line contains 
N
 space-separated positive integers denoting elements of the list.
Note - You just have to implement palindromeLlist() function. Linked list head is passed as an argument.

Output Format
Return true (1 in case of C language) or false(0 in case of C language) from the palindromeLlist() function depending on the linked list.

Constraints
1<=T<=10

1<=N<=100

1<=Ai<10

Time Limit
1 second

Example
Input
2
3
2 5 2
5
4 5 6 3 4

Output                                                         #INTERVIEWBIT
true
false

APPROACH:
       1. find mid
       2. reverse the list after mid
       3. check after mid and before mid list ( both node is equal or not)
       4. if = return True , else = return False
       5. point to next node of both the list
       
       
CODE:
"""
Complete the palindromeLlist() function below
For your reference
class Node:
	def __init__(self,data):
		self.data = data
		self.next = None

class LinkedList:
	def __init__(self):
		self.head=None
		self.tail = None


 	def insertAtEnd(self,data): # returns head of the linked list
 	def printSinglyLinkedList(self):
"""


# Function Arguments: head (refers to the head of the linked list)
def palindromeLlist(head):
  if head and head.next is None: return True
  slow = fast = head
  while fast and fast.next:
    slow  = slow.next
    fast = fast.next.next
   
  prev = None
  while slow:
    temp = slow.next
    slow.next = prev
    prev = slow
    slow = temp
    
  while prev:
    if head.data != prev.data:
      return False
    head = head.next
    prev = prev.next
  return True
    
    
